#
# This file made available under CC0 1.0 Universal (https://creativecommons.org/publicdomain/zero/1.0/legalcode)
#
# Ensure that there are no users that have never been logged in.
# Description: Checks that all users have logged in at least once.
#
# Trigger Type: Change Triggered
# Scope of Changes: IAM:User


import json
import boto3


APPLICABLE_RESOURCES = ["AWS::IAM::Group"]


def evaluate_compliance(configuration_item):
    if configuration_item["resourceType"] not in APPLICABLE_RESOURCES:
        return "NOT_APPLICABLE"
    config = boto3.client("config")
    resource_information = config.get_resource_config_history(
        resourceType=configuration_item["resourceType"],
        resourceId=configuration_item["resourceId"]
    )
    groupr_name = resource_information["configurationItems"][0]["resourceName"]
    print groupr_name
    iam = boto3.client("iam")
    #user = iam.get_user(UserName=user_name)
    #u = user["User"]
    #List_of_Policies =  iam.list_user_policies(UserName="kkalavala@securonix.com")
    
    #List_of_Groups =  iam.list_groups_for_user(UserName="aanand@securonix.com")
    #print List_of_Groups
    #List_of_Policies =  iam.get_policy(PolicyArn="arn:aws:iam::aws:policy/AdministratorAccess")
    #print List_of_Policies,"......................................"
    #p = List_of_Policies['Policy']
    #print p["PolicyName"]
    list_policy_arn = iam.list_attached_group_policies(GroupName=groupr_name, MaxItems=1000)
    print list_policy_arn
    print list_policy_arn["AttachedPolicies"][0]["PolicyName"]
    for key in list_policy_arn["AttachedPolicies"]:
        print key['PolicyName']
    for key in list_policy_arn["AttachedPolicies"]:
	    if key['PolicyName']=='AWSRestrictSourceIP':
		    return "COMPLIANT"
    return "NON_COMPLIANT"
    
def lambda_handler(event, context):
    invoking_event = json.loads(event["invokingEvent"])
    configuration_item = invoking_event["configurationItem"]
    result_token = "No token found."
    if "resultToken" in event:
        result_token = event["resultToken"]

    config = boto3.client("config")
    result = config.put_evaluations(
        Evaluations=[
            {
                "ComplianceResourceType":
                    configuration_item["resourceType"],
                "ComplianceResourceId":
                    configuration_item["resourceId"],
                "ComplianceType":
                    evaluate_compliance(configuration_item),
                "Annotation":
                    "The user is attached with IP restriction plicy.",
                "OrderingTimestamp":
                    configuration_item["configurationItemCaptureTime"]
            },
        ],
        ResultToken=result_token
    )
    print result